buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
        springCloudVersion = 'Finchley.RC1'
    }
    repositories {
        // NOTE: You should declare only repositories that you need here
        mavenLocal()
        maven {
            name "aliyun1"
            url 'http://maven.aliyun.com/nexus/content/groups/public'
        }
        maven {
            name "aliyun2"
            url 'http://maven.aliyun.com/mvn/repository/'
        }
        maven {
            name "spring repo"
            url "http://repo.spring.io/release"
        }
        maven {
            name "spring milestone"
            url "https://repo.spring.io/milestone/"
        }
        maven {
            name "spring snapshot"
            url "https://repo.spring.io/snapshot"
        }

        jcenter()
        mavenCentral()
        maven {
            url 'http://repos.zeroturnaround.com/nexus/content/groups/zt-public/'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'

repositories {
    // NOTE: You should declare only repositories that you need here
    mavenLocal()
    maven {
        name "aliyun1"
        url 'http://maven.aliyun.com/nexus/content/groups/public'
    }
    maven {
        name "aliyun2"
        url 'http://maven.aliyun.com/mvn/repository/'
    }
    maven {
        name "spring repo"
        url "http://repo.spring.io/release"
    }
    maven {
        name "spring milestone"
        url "https://repo.spring.io/milestone/"
    }
    maven {
        name "spring snapshot"
        url "https://repo.spring.io/snapshot"
    }

    jcenter()
    mavenCentral()
    maven {
        url 'http://repos.zeroturnaround.com/nexus/content/groups/zt-public/'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


//默认的一些文件路径的配置
sourceSets {
    integTest {
        java.srcDir file('src/test/java')
        resources.srcDir file('src/test/resources')
    }
}

task integTest(type: Test) {
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

jar {
    group = 'test.lind'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.8
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}


integTest {
    outputs.dir snippetsDir
}


asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputDir "build/asciidoc"
    dependsOn test
    sourceDir 'src/docs/asciidoc'
}


dependencies {
    compile(
            'org.springframework.boot:spring-boot-starter-web',
            'org.zalando:jackson-datatype-money:1.0.0-RC2',
            'org.javamoney:moneta:1.1',
            'org.modelmapper:modelmapper:2.0.0',
            'org.springframework.boot:spring-boot-starter-data-mongodb',
            'org.springframework.cloud:spring-cloud-starter-openfeign',
            'org.springframework.cloud:spring-cloud-starter-sleuth',
            'org.springframework.boot:spring-boot-starter-actuator',

    )

    testCompile(
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.boot:spring-boot-starter-webflux',
            'org.javamoney:moneta:1.1',
            'org.projectlombok:lombok',
            'org.zalando:jackson-datatype-money:1.0.0-RC2',
            'org.springframework.restdocs:spring-restdocs-mockmvc',

    )
    compileOnly(
            'org.projectlombok:lombok',
            'org.springframework.boot:spring-boot-configuration-processor'
    )

}
